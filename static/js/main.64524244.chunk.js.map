{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/searchbox.js","components/scroll.js","containers/app.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","street","contact","phone","website","address","className","alt","src","Cardlist","robots","console","log","map","user","i","key","username","Searchbox","searchfeild","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","App","onSerachChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filterdborots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOAmBeA,EAjBF,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,KAAKC,EAAmD,EAAnDA,MAAMC,EAA6C,EAA7CA,GAAWC,GAAkC,EAA1CC,QAA0C,EAAlCD,QAAOE,EAA2B,EAA3BA,MAAMC,EAAqB,EAArBA,QAAqB,EAAbC,QAErD,OACG,yBAAKC,UAAU,sDAEX,yBAAKC,IAAI,QAASC,IAAG,+BAA0BR,EAA1B,cACrB,6BACI,sCAAYF,GACZ,uCAAaC,GACb,uCAAaI,GACb,qCAAWC,GACX,wCAAcH,EAAd,QCkBDQ,EA5BC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAKjB,OAJCC,QAAQC,IAAIF,GAKV,6BAEQA,EAAOG,KAAI,SAACC,EAAKC,GACb,OACQ,kBAAC,EAAD,CACAC,IAAKD,EACLf,GAAIc,EAAKd,GACTF,KAAMgB,EAAKhB,KACXC,MAAOe,EAAKG,SACZf,QAASY,EAAKZ,QACdC,MAASW,EAAKX,MACdC,QAAWU,EAAKV,QAChBH,OAAUa,EAAKT,QAAQJ,cCNhCiB,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACQ,yBAAKd,UAAU,OACP,2BACIA,UAAU,mCACVe,KAAK,SACLC,YAAY,cACZC,SAAUH,MCCnBI,EARA,SAACC,GAChB,OACQ,yBAAKC,MAAO,CAACC,SAAS,SAASC,OAAO,UACjCH,EAAMI,WCkDJC,G,wDA9CX,aAAmB,IAAD,8BACd,gBAcRC,eAAiB,SAACC,GAGd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAhBrC,EAAKC,MAAS,CACV3B,OAAS,GACTwB,YAAc,IAJJ,E,gEASjB,IAAD,OACII,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAW,EAAKT,SAAS,CAAEvB,OAAOgC,S,+BAU/B,IAAD,EACwBC,KAAKN,MAA7B3B,EADA,EACAA,OAAQwB,EADR,EACQA,YACVU,EAAgBlC,EAAOmC,QAAO,SAAAC,GAE5B,OAAOA,EAAMhD,KAAKiD,cAAcC,SAASd,EAAYa,kBAG/D,OAAQrC,EAAOuC,OAGD,yBAAK3C,UAAU,MACP,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWc,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUrB,OAAUkC,MANnC,+C,GA/BEM,cCICC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,a","file":"static/js/main.64524244.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id,contact,street,phone,website,address}) => {\r\n    // const{ name,email,id} = props; \r\n     return (\r\n        <div className='tc bg-light-blue dib br2 pa2 ma2 grow bw4 shadow-5'>\r\n            {/* <h1>Robo friends</h1> */}\r\n            <img alt=\"robot\"  src={`https://robohash.org/${id}?100x120`} />\r\n            <div>\r\n                <h3>Name : {name}</h3>\r\n                <p> Email : {email}</p>\r\n                <p> phone : {phone}</p>\r\n                <p> web : {website}</p>\r\n                <p> street : {street} </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist =({robots}) => {\r\n  console.log(robots);\r\n  // if(true)  {\r\n  //   throw new Error('NOOOOO');\r\n  // }\r\n return (\r\n    <div>\r\n      {\r\n            robots.map((user,i) => {\r\n                return (\r\n                        <Card \r\n                        key={i} \r\n                        id={user.id}\r\n                        name={user.name}\r\n                        email={user.username} \r\n                        contact={user.contact} \r\n                        phone = {user.phone} \r\n                        website = {user.website}\r\n                        street = {user.address.street}\r\n                      />\r\n                );\r\n        })\r\n      }\r\n    </div> \r\n\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfeild, searchChange}) => {\r\n    return (\r\n            <div className='pa2'>\r\n                    <input \r\n                        className='pa3 ba b--green bg-lightest-blue'\r\n                        type='search' \r\n                        placeholder='search here'  \r\n                        onChange={searchChange}  \r\n                    />\r\n            </div>\r\n    );\r\n} \r\n\r\nexport default Searchbox;","import React from 'react'; \r\n\r\nconst Scroll = (props) =>{\r\nreturn(\r\n        <div style={{overflow:'scroll',height:'600px'}}>\r\n            {props.children}\r\n        </div>\r\n)};\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/searchbox';\r\nimport Scroll from '../components/scroll';\r\n//import ErrorBoundry from '../components/ErrorBoundry';\r\nimport './app.css';\r\n\r\n\r\nclass App extends  Component{\r\n    constructor()     {\r\n        super();\r\n        this.state  = {\r\n            robots : [], //robots\r\n            searchfield : ''\r\n        } \r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users =>  {this.setState({ robots:users })}); \r\n    }\r\n\r\nonSerachChange = (event) => \r\n{\r\n    //console.log(event.target.value);\r\n    this.setState({searchfield: event.target.value})\r\n     // console.log(filterdborots);\r\n}\r\n\r\n    render()    {\r\n        const { robots, searchfield } = this.state;\r\n        const filterdborots = robots.filter(robot =>\r\n            {\r\n                return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n            })\r\n\r\n      return !robots.length ?\r\n                 <h1>Loading ...</h1> :\r\n                (\r\n                    <div className='tc'>\r\n                            <h1 className='f1'>Robo friends</h1>\r\n                            <Searchbox searchChange={this.onSerachChange} />\r\n                            <Scroll>\r\n                                <Cardlist robots = {filterdborots} />\r\n                               {/* <ErrorBoundry>\r\n                                    <Cardlist robots = {filterdborots} />\r\n                                </ErrorBoundry> */}\r\n                            </Scroll>\r\n                    </div>\r\n                );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n"," import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/app';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(<App/>,   document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}